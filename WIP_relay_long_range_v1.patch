1/ On the "Relay" and "Strategic map" screens, reveal "Long Range Sensors" range instead of just "Short Range Sensors" range

--- EmptyEpsilon-EE-2021.03.16/src/screenComponents/radarView.cpp	2021-03-16 14:36:34.000000000 +0100
+++ EmptyEpsilon-EE-2021.03.16/src/screenComponents/radarView.cpp_patched	2021-03-28 08:21:39.901481817 +0200
@@ -245,7 +245,8 @@ void GuiRadarView::drawNoneFriendlyBlock
             if (stb_obj
                 && (obj->isFriendly(my_spaceship) || obj == my_spaceship))
             {
-                r = stb_obj->getShortRangeRadarRange() * scale;
+                if (obj == my_spaceship) { r = stb_obj->getLongRangeRadarRange() * scale; }
+                else { r = stb_obj->getShortRangeRadarRange() * scale; }
                 sf::CircleShape circle(r, 50);
                 circle.setOrigin(r, r);
                 circle.setFillColor(sf::Color(255, 255, 255, 255));




2/ If the object is neither Friendly, nor Enemy, reveal area of 10 around them

@@ -253,6 +254,18 @@ void GuiRadarView::drawNoneFriendlyBlock
                 window.draw(circle);
             }
 
+            if (stb_obj
+                && ( ! obj->isFriendly(my_spaceship) && ! obj->isEnemy(my_spaceship) ))
+            {
+		 r = 10;
+                sf::CircleShape circle(r, 50);
+                circle.setOrigin(r, r);
+                circle.setFillColor(sf::Color(255, 255, 255, 255));
+                circle.setPosition(worldToScreen(obj->getPosition()));
+                window.draw(circle);
+            }
+
+
             P<ScanProbe> sp = obj;
 
             if (sp && sp->owner_id == my_spaceship->getMultiplayerId())
--- EmptyEpsilon-EE-2021.03.16/src/screenComponents/radarView.cpp	2021-03-16 14:36:34.000000000 +0100
+++ EmptyEpsilon-EE-2021.03.16/src/screenComponents/radarView.cpp_patched	2021-03-28 09:35:03.007650137 +0200
@@ -243,6 +243,18 @@ void GuiRadarView::drawNoneFriendlyBlock
             P<ShipTemplateBasedObject> stb_obj = obj;
 
             if (stb_obj
+                && (obj == my_spaceship))
+            {
+                r = stb_obj->getLongRangeRadarRange() * scale;
+                sf::CircleShape circle(r, 50);
+                circle.setOrigin(r, r);
+                circle.setFillColor(sf::Color(255, 255, 255, 255));
+                circle.setPosition(worldToScreen(obj->getPosition()));
+                window.draw(circle);
+                drawNebulaBlockedAreas(mask_texture);
+            }
+
+            if (stb_obj
                 && (obj->isFriendly(my_spaceship) || obj == my_spaceship))
             {
                 r = stb_obj->getShortRangeRadarRange() * scale;
@@ -253,6 +265,17 @@ void GuiRadarView::drawNoneFriendlyBlock
                 window.draw(circle);
             }
 
+            if (stb_obj
+                && ( ! obj->isFriendly(my_spaceship) && ! obj->isEnemy(my_spaceship) ))
+            {
+                r = 10;
+                sf::CircleShape circle(r, 50);
+                circle.setOrigin(r, r);
+                circle.setFillColor(sf::Color(255, 255, 255, 255));
+                circle.setPosition(worldToScreen(obj->getPosition()));
+                window.draw(circle);
+            }
+
             P<ScanProbe> sp = obj;
 
             if (sp && sp->owner_id == my_spaceship->getMultiplayerId())
@@ -646,6 +669,7 @@ void GuiRadarView::drawObjects(sf::Rende
             // Set the radius to reveal as getShortRangeRadarRange() if the
             // object's a ShipTemplateBasedObject. Otherwise, default to 5U.
             float r = stb_obj ? stb_obj->getShortRangeRadarRange() : 5000.0f;
+            if ( stb_obj == my_spaceship ) { r = stb_obj->getLongRangeRadarRange() }
 
             // Query for objects within short-range radar/5U of this object.
             sf::Vector2f position = obj->getPosition();
